1 What is a Lead Developer?
This chapter covers
Defining what is a Lead Developer
Comparing and contrasting a Senior vs. Lead Developer
Understanding the tasks and responsibilities of a Lead Developer
Listing the expectations of a Lead Developer beyond their day-to-day tasks
So, you want upward mobility in your career as a developer? The Lead Developer role may be for you. If you have researched the Lead Developer role or are a newly appointed Lead Developer, then you probably encountered resources that focused on the technical expertise you must achieve before being hired for this role. However, the title “Lead Developer” includes the word “lead,” and you must have a combination of both technical and leadership skills.

A Lead Developer, also known as a technical lead, is a senior-level software developer who takes on additional responsibilities within a development team. The Lead Developer is often responsible for guiding and mentoring other team members, making technical decisions, and coordinating the development team's work. They represent the development team and work with project managers to prioritize development tasks. The Lead Developer may also play a key role in the planning and execution of software projects and may be involved in the management of the team and the development process. In my experience, the role of a Lead Developer varies in different types of organizations and cultures, and there is no one-size-fits-all approach.

Lead Developers are often expected to handle communication and support the development needs of project teams. To be a successful Lead Developer, you must have a high level of critical thinking and people skills. It is vital to make quick and effective decisions and communicate those decisions among the team. There may be times when team members disagree with your decisions, and you must be able to handle conflict and difficult conversations.

Many Senior Developers are promoted to Lead Developer positions based solely on their technical skills. The focus on soft skills is lacking for technical positions; however, when a developer is in a leadership position, they need support in mastering the soft skills necessary for success in working on teams and interfacing with clients and stakeholders. I have witnessed this far too often, and it happened to me, too. I felt like I was thrown into a pool without knowing how to swim, and while it was difficult at first, I was able to learn on the job, and I eventually learned how to be a great leader.

To start, you need to understand the demand for Lead Developers and who can be successful in this role.

livebook features:
highlight, annotate, and bookmark
  
Select a piece of text and click the appropriate icon to annotate, bookmark, or highlight (you can also use keyboard shortcuts - h to highlight, b to bookmark, n to create a note).

You can automatically highlight by performing the text selection while keeping the alt/ key pressed.
1.1 Who Can Be a Lead Developer
Lead Developers can be from anywhere in the world, have many different backgrounds, and represent all genders. Today, there is a need for more diversity in developer roles. According to The United States Bureau of Labor Statistics (BLS), only 21.5% of software developers in the United States are women. White developers equal 55.0% of the industry, Asians are 36.4%, followed by Black, Hispanic, or Latino at 5.7%. It is estimated that 8% of all developers are LGBTQIA+. Companies that champion diverse development teams can create innovation as they can create products and services for a wider audience. Being a champion for diversity is something you need to consider as a Lead Developer when you are hiring new developers.

Figure 1.1 Developer Demographics - USA (https://www.bls.gov/cps/cpsaat11.htm)

According to the Stack Overflow Developer survey, the gender disparity is even greater.Over 73,000 developers took this global survey from 180 countries, and it suggests that almost 93% of developers are men, 4.8% are women, and 1.39% are non-binary, genderqueer, or gender non-conforming. Regarding race at the global level, 39.38% of all developers are white, 37.25% are European, 9.7% are Indian, 9.48% are Asian, and 5.71% are Hispanic or Latino.

Figure 1.2 Developer Demographics – Worldwide (https://survey.stackoverflow.co/2022/#demographics-gender-prof)

Most jobs I have had included a global team of both employees and contractors. In the United States, many tech companies outsource a portion of their software development staff, so I have had the pleasure of working with people from various backgrounds. However, most of the full-time employees I have worked with were not people of color. When I hired a team for the first time, I hired 3 white women and one white man. This was my unconscious bias, and I should have done a better job of seeking talent from different demographics. I could have required a wider talent pool from the recruiter including an equally diverse demographic. Do not make the same mistake that I did! Many organizations support diversity, equity, and inclusion that I am involved with including Black Girls Code, Girls Who Code, Women Who Code, and Latinas Who Code to name a few. Being involved in these communities has taught me valuable lessons and connected me with some of the most talented developers I have had the pleasure of knowing.

Another important demographic to note is education level. Many people think a computer science degree is necessary to be a developer and even more so for a Lead Developer. While this was true at one point, it is no longer the case. Patrick Collison, CEO of Stripe, and Sahil Lavingia, Founder of Gumroad do not have college degrees and they went on to excel in leadership and form successful tech companies. Only some people can adhere to the strict approach to education offered by universities. Some people want to learn on the job and that’s fine! Many people also do not find coding until later in life and they studied something vastly different in college.

Many of the industry experts that are featured throughout this book come from different backgrounds including gender, race, and educational level. They are diverse, representing many groups in tech from around the world to show you that you can be successful as a Lead Developer no matter your background.

1.1.1 Who This Book Is For
This book is for aspiring & current Junior, Senior, and Lead Developers as well as Engineering or Development Managers. People in these roles can benefit from the information presented in this book to outline their career plans and have a clear path to achieving their goals using current industry best practices in technical leadership. If you are an Engineering or Development Manager, you can use the content presented in this book to help others achieve their goals and gain insight into how to help Lead Developers grow in their careers.

This book is not for non-developers and developers who do not work on a team. If you do not have a team to lead and mentor, then most of the concepts in this book will not apply to your role. Even if you interface with clients and stakeholders occasionally, the focus is more on technical skills and less on soft skills or leadership. For non-developers, this book is not a fit as it covers how to gain expert-level technical skills as well as leadership skills for development teams. Lead Developers must balance technical and leadership skills and we will cover both throughout this book.If you’re a Junior Developer, this book will help you learn how to study and hone your technical skills effectively. There are also many soft skills discussed in this book that you will benefit from in your current position such as communicating with your co-workers and using active listening to ensure that you are understanding not only what you are building, but also why you are building it. This goes a long way to help you create excellent software and websites with the end user in mind.

For Senior Developers, this book will help you prepare to move into a leadership role. You are already a technical expert, now you must learn how to discuss your technical approach for a project with project teams and get their buy-in. Learning soft skills will help you sell your idea and build a collaborative communication culture within your team. You also need to be an excellent mentor and support your team. These expectations may take you outside of your comfort zone and I encourage you to go outside your comfort zone. Some people don’t want to do this and that’s ok! However, I can tell you from experience that going outside of your comfort zone can lead you to opportunities that you never thought possible.

If you are an Engineering Manager with or without development skills, you will want to share this book with Junior, Senior, and Lead Developers on your team to help them grow in their careers. If your career includes development roles, then you may want to stay current with your skills so that you can communicate with your Lead Developers about their technical approaches. Even if your career did not include development roles and you have little to no development experience, as an Engineering Manager, you do have technical skills. You may not be able to sit down and code but you are able to understand technical concepts and this book will help you understand and empathize with your Lead Developers and their struggles.

1.1.2 Reviewing Top Industries for Lead Developers
As a Lead Developer, it is important to be aware of the industries that offer the most opportunities for employment. The most popular industries for Lead Developers include:

Retail
Technology
Healthcare
Banking/Fintech
Manufacturing
Business Services
Government
I have worked in most of these sectors and historically, government jobs (at least in the USA) are the most stable and come with good benefits. The downside is that you will often not work on cutting-edge technology, instead, you will work with legacy code and systems. This can have its benefits as you will learn a bit of programming history. However, these jobs often go to developers who specialize in legacy systems. These systems are not going away any time soon and COBOL programmers are still in high demand.

I have also done a lot of work in the Healthcare and Business Services industries. In Healthcare, I learned a lot about security due to privacy laws dealing with patient information. And working in Business Services gave me the experience of working with external clients and customers. Each industry comes with its benefits, and I suggest you work for companies that provide you with opportunities to work on projects that interest you.

Each industry focuses on many different types of products and services. For example, in the Fintech industry, you would focus on consumer products and business solutions for handling payments or investments. Big Technology companies focus on innovative consumer products such as apps, streaming services, video games, and business-facing or B2B solutions. Manufacturing and Retail companies create the items that we use every day including cars and clothing which they sell on e-commerce websites.

Table 1.1 Top Industries and Companies for Lead Developers
Industry
Top Companies
Pros
Cons
Retail
Walmart, Amazon, Kroger, and Costco
Specialize in eCommerce, employee discounts
Prone to frequent layoffs based on sales, long hours during the holidays
Technology
Facebook/Meta, Apple, Amazon, Netflix, and Google
Learn from the best talent in the industry, excellent perks, high salaries, vesting options
Very high competition and expectations, stringent performance review process, long hours
Healthcare
CVS, UnitedHealth, Johnson and Johnson
Gain experience with high-level security systems and data privacy
Many codes to keep track of pertaining to health data
Fintech
American Express, PayPal, Mastercard, Fiserv, and Visa
Highly profitable, more job security, work on creative app solutions
Responsible for preserving sensitive data, constant hacking attempts
Manufacturing
Tesla, Samsung, Toyota, and Lockheed Martin
Variable project opportunities, learn different technologies and systems
Fewer remote jobs, not always on the cutting edge of technology
Whatever industry you are interested in, most companies need developers. You may work on different types of products and services such as building apps and websites or consulting for an agency; however, the role of the Lead Developer remains the same. The expectations and struggles for this role are applicable across all industries and sectors.

1.1.3 Being a Successful Lead Developer
A successful Lead Developer will learn technical skills throughout their career by working in roles such as Junior Developer, Senior Developer, or Developer Advocate/Developer Relations. In these positions, you will develop your technical skills as you build systems based on business or functional requirements and write technical requirements for tasks assigned to you. You will also understand the deployment process, as you are responsible for deploying your code for testing before it goes into production.

Lead Developers are expected to have the technical expertise to build systems and lead the development team. You may work with a Lead Architect responsible for providing the technical requirements and approach. Lead Developers focus mainly on development tasks; however, these roles are often combined into one which is the focus of this book. It is best to know too much instead of too little to prepare you for anything.

When you move into a Lead Developer position, you will combine your technical skills with leadership skills. Facilitating communication is a key skill that you will need to master to ensure that the development team is productive and produces high-quality work. Decision-making is another leadership skill that takes some time to learn, especially making quick decisions in an emergency by gathering feedback from your team. You need empathy and self-awareness to build trust and cultivate relationships. When you build trust, your team will work together well, and you will see productivity increase. These relationships are important to not only your success but also your team’s success.

Figure 1.3 Technical Skills vs. Leadership Skills

The success of a Lead Developer is based on the success of your team. This includes ensuring that your team works within the projected timeline and that you take on minimal technical debt. To accomplish this, you must prioritize the most important tasks and help unblock your team so they can complete their tasks on time and ensure high-quality work. An important metric to compare is the tasks to be completed in each iteration or release vs. what was completed. The quality of your team’s work will be reflected in the open/close rates of tickets, issues, or bugs. When code is deployed to production, it should be the final version with no critical errors which will reflect an attention to detail by the team.

You do not have to have both technical expertise and leadership skills to apply for your first Lead Developer job. If you’re lucky, you will be able to get promoted to a Lead Developer position at your current job. However, since you are reading this book, you are already ahead of the curve, and you will understand more about what lies ahead when you’re finished. Many Senior Developers are thrown into Lead Developer positions and expected to “learn on the job”. This only works if they are given the support that they need to navigate their new leadership position. Some companies offer access to learning platforms such as Pluralsight; however, you need mentoring as well. I suggest having a group of mentors from different backgrounds including gender, race, education level, and experience. When you have a diverse group of mentors, you will be inspired by their different points of view. That way, you can gain inspiration from them to find your own leadership style.

1.2 Lead Developer Tasks
Understanding the tasks and responsibilities of a Lead Developer is an important step in your career journey. Whether you are building products or offering services, you will have leadership responsibilities within project teams and potentially also at the organizational level. These can seem like daunting tasks but with the proper preparation and support, you will be able to take them head-on. While roles and responsibilities can vary across cultures, the most common scenarios are presented throughout this section.

When you are a Senior Developer, your focus is mainly on your own work. Senior Developers may also mentor Junior Developers to assist them in learning new skills and collaborating with them on their work. The spotlight is on their technical skills and consistently improving their technical expertise. This role requires a high level of experience and knowledge that is incredibly valuable to development teams. Problem-solving skills help Senior Developers use their critical thinking to troubleshoot errors, fix bugs, and help remove blockers for other team members. This is a department-facing role with little to no direct communication with clients and stakeholders such as Project Managers, Development Managers, Marketers, etc.

In contrast, Lead Developers are responsible for working with project managers, clients, and stakeholders. As a Lead Developer, you will represent the entire development team, gather their feedback, form your technical approach, and present it to the project team. The focus is more on business and communication skills as you are the face of the development team, and you act as the go-between to communicate client or stakeholder requirements to the developers. This role also requires some project management skills because the Lead Developer works closely with the Project Manager to calculate project estimates and keep the development team on track.

Figure 1.4 Senior vs. Lead Developer

An important Lead Developer task is assisting in the project proposal phase when starting a new project. At the beginning of any project, the Lead Developer is tasked with forming a technical approach and creating project estimates. This process begins with gathering feedback from all project stakeholders, including business and technical requirements. This feedback supports the overall technical approach, which will enable you to create the project estimates with the help of your team since they will be the ones doing the work. After you present your technical approach, your estimates will need to be refined. Project estimates change frequently, and it is essential for the Lead Developer to constantly gather feedback from the team.

Figure 1.5 Starting a New Project

The following list contains the main responsibilities of a Lead Developer:

Leading the Development Team
Working with Project Teams
Communicating with Clients and Stakeholders
Setting Development Standards
Building Technical Architecture
When you are working through these tasks, keep in mind that it will take practice. No one is comfortable with everything at first. You will learn as you go, and you will improve your skills. Communication is the key skill that every Lead Developer needs to be successful. When you are in a leadership position, your main job will be facilitating communication within your team. Lead Developers play an important role in ensuring that the development team is given the support that they need. This also goes a long way to retaining talent when your team is constantly learning, growing, and improving.

1.2.1 Leading the Development Team
Leading by example, building trust, and mentoring the development team is the first step on your path to leadership success. Lead Developers are responsible for supporting the development team to ensure their success both as a team and individually. This is ultimately how your success as a Lead Developer will be measured, not by your success alone but rather by your team.

When you’re in a leadership position, you can make or break an employee’s day. Leading by example means setting a positive tone for your team and coaching them through difficult times, especially in emergencies. For example, what do you do when a website goes down? Hopefully, you have an emergency plan in place that you can follow. If not, you should make one before emergencies happen. You must stay calm, formulate a plan of attack, and assign tasks to resolve the issue quickly. You should also tell everyone on the project team what the plan is step-by-step and keep them updated as each step is completed. If the resolution requires a deployment, you will need to get Quality Assurance (QA) involved and let them know the timing of each step so that they can prepare to start testing.

Building trust in your team will help you understand each other’s points of view and improve your team’s morale. If your team does not trust you, they will not come to you when they have a problem. If they can’t come to you, they may not go to anyone, and their needs will never be met. When this happens, the employee can become disengaged from their work and potentially quit their job. Turnover is more expensive than you think, and it can take a developer up to a year to be fully acclimated to their job.

A study from LinkedIn states that the turnover rate in the tech industry is 13.2%. Furthermore, in recent years, 50% more people have voluntarily quit their jobs. According to a study by the Work Institute , the cost of employee turnover is approximately 33% of their annual salary. It is estimated that it can take up to two months to hire a new software developer and another six months to bring them up to speed. If there is no knowledge transfer, the costs are even higher, which is why Lead Developers must ensure that they provide proper onboarding documentation, which we will cover in depth later in this book. You want to avoid the loss of knowledge by retaining top talent and building trust in your team.

A good way to build trust is to back up your employees. When someone has an idea, and you think it is a good idea, then you need to back them up. Defending your team's ideas will make them feel listened to and appreciated, which will help you form a bond with them. If the idea is not exactly what you had in mind, you should keep an open mind and consider options that build upon the original idea. You can say, “That’s a good start, but what do you think about [xyz]?” Asking questions is how you will draw out the talent within your team.

The first time I led a team, we implemented a project tracking system that was suggested to us by a director. The system did not work well for our types of projects, and my team suggested that we switch to Atlassian Jira. I was not keen to go against the director’s suggestion, but I knew that we would have a problem if we did not switch. When I had a one-on-one with the director, I explained our issues with the system he suggested and how Atlassian Jira would solve these issues for us. It was an uncomfortable conversation for me as a first-time leader but in the end, I explained our position, backed up my team, and we came to an agreement. When we implemented Atlassian Jira, I kept my team involved. I listened to them, and we selected the best processes that worked for the team. This went a long way in building trust and comradery on my team.

One of the most important behaviors you can exhibit is open communication. Clear, honest communication builds a foundation of trust and sets expectations for how your team interacts. If you make a promise, ensure you can deliver on it to show your team that you follow through on commitments. Being receptive to feedback shows that you value your team members' opinions and ideas. You must also act honestly and objectively and in the best interest of the community. Misusing information or treating people unfairly can erode trust and destroy morale. Respectfully handling information and requests and treating people with respect and fairness can help create a positive and productive team dynamic. By exhibiting these behaviors, you can build a culture of trust within your team, leading to greater collaboration, productivity, and success.

It is also important to ensure that your team is not stretched too thin and working too many hours because that results in burnout and lower productivity. You should promote work-life balance and encourage your team members to take breaks when needed. Additionally, it's essential to foster a culture of open communication and collaboration, allowing team members to share their workload and work together to achieve goals. Providing support and recognizing their hard work and achievements can also help boost morale and reduce stress levels. By taking a proactive approach to addressing burnout, you can help your team members feel valued, supported, and motivated, which can ultimately lead to higher productivity and better outcomes. It is of utmost importance to get feedback from your team on project estimates and coordinate timelines with the project manager.

1.2.2 Working with Project Teams
Lead Developers are a crucial part of the project team. They work closely with project managers, QA, clients, and stakeholders to provide their technical expertise and assist in project planning. Their skills directly contribute to the success of the project as they provide estimates and facilitate communication between the clients, stakeholders, and development team.

Working well with project managers is an essential skill for a Lead Developer. You should understand the project management framework and where you can assist. For new projects, you will provide estimates of the development work that needs to be done and the overall approach. As the work progresses, you will work closely with the project manager to organize tasks, priorities, bugs, and technical debt. The Lead Developer is the liaison between the project manager and the development team, and you must rely on their feedback to come up with estimates and to weigh in on priorities.

For example, if a developer on your team has been working on a product or feature and the priorities change, they should be given the time to get to a good stopping point, document where they left off, and then check it into a repository. The Lead Developer should ensure that their work is properly documented so that they or someone else can pick it back up in the future. This happens a lot because priorities change all the time. If that were not the case, we would not need project managers!

Another important task for a Lead Developer is working with QA to ensure that the quality of the development work matches the requirements, the code is ready for testing, and everything works as intended. This entails assisting with their testing strategy, ensuring that the technical requirements are well documented, and answering questions when necessary. The QA process is critical to a project’s success and as a Lead Developer, you will be expected to work with them to figure out common issues so that you can adjust your development approach to avoid these issues in the future.

Working directly with clients and stakeholders is probably one of the hardest skills for a Lead Developer to master. I had a very hard time at first being the face of the development team which can be a daunting experience, especially if you are an introvert by nature. The development team attend meetings including project kickoffs, sprint planning, and retrospectives to name a few. This is a good learning experience for any developer even before they become a Lead Developer. Lead Developers may work with both internal and external stakeholders and vendors for services that they are using for the project. When a Lead Developer works directly with project stakeholders, the development team will get the technical information from them and not the project manager. This goes a long way to avoid miscommunication and ensure that everyone is on the same page, which will help to minimize technical debt and improve productivity.

1.2.3 Communicating with Clients and Stakeholders
So, how do you communicate with clients and stakeholders? Everyone is different so you should start by assessing their level of comfort, understanding their point of view, and building relationships. Remember, clients and stakeholders are people with lives outside of work. You should always get to know the people you work with as human beings, consider their emotions, and attend to their needs.

You can assess a client’s level of comfort by observing how they interact with the rest of the project team. If the project is going poorly, are their arms crossed? Is there a frown on their face? Or are they open to suggestions and collaborating to resolve the issues? If they are not collaborative, this suggests that they do not trust that the project team has their best interests in mind. An example of this is when the client only asks “when” and “how much” as this does not assist in finding a solution. You can always tell the status of a working relationship when things go wrong. How do people react? Teams that work well in the face of adversity and show the client or stakeholder a unified front will ease their concerns and make them more comfortable with the status of the project.

Table 1.2 Body Language References
Title
Link
The Dictionary of Body Language: A Field Guide to Human Behavior
https://shop.harvard.com/book/9780062846877
Your Body Language Speaks for You in Meetings
https://hbr.org/2012/09/your-body-language-speaks-for
How to Get Better at Reading People from Different Cultures
https://hbr.org/2018/09/how-to-get-better-at-reading-people-from-different-cultures
Another key aspect of providing professional support for your clients and stakeholders is understanding their points of view. You should not design their systems until you have business requirements and you have spoken to the team to ensure that you are all in agreement. Without solid business requirements, you may introduce scope creep. Thinking about not only how but why your team is building certain products or features will help the development team be more accurate when they begin working on new tasks. Developers need to test their work before it is deployed, and they need real-world examples to work with. You may also get feedback from the developers for improvements to run by the rest of the team. When you suggest improvements to clients and stakeholders and you understand their needs, you will provide them with added value, and they will think highly of the work that the team is doing.

Getting to know your clients as people helps to diffuse tension and build important relationships. Meetings should start with a quick “How is everyone doing?” and you should not shy away from asking people about their life outside of work. This goes for both offshore and domestic teams, they should be treated the same. If you have a meeting on a Friday, you can ask, “What is everyone doing this weekend?”. Or ask the opposite on a Monday! You will often find things that you have in common with them and you can work them into the conversation from time to time. You may follow the same sports teams, watch the same movies, or read the same books. Even if you come from different backgrounds, you can often find something that you have in common with anyone. You can also inject some mild humor from time to time to lighten the mood.

Everyone struggles with communicating with clients and stakeholders, especially if you are providing a service to a client and not working on an internal project. Providing services such as consulting or working on business-to-business (B2B) solutions is a bit harder because the company is relying on you to ensure that the clients and stakeholders are happy so that their business is retained. I have worked for consulting agencies on projects including building enterprise websites for Fortune 500 companies and some of these projects had multi-million-dollar budgets. The level of responsibility was high for me as the Lead Developer on those types of projects and it was a struggle to find my voice at first.

When you are working on an internal project to build a product or support your organization’s infrastructure, communication is a bit different. It is no less important, but it is often easier as you already have common ground working for the same company. You may also work with 3rd party vendors and that is a different relationship because they are business partners who work for your organization. You should offer everyone that you work with the same level of professionalism and consideration of their needs. I have worked on internal products where the project team was mostly internal with a few external vendors. The atmosphere during meetings was much more casual and there was more chit-chat, but we were still focused on the project and committed to building the best products possible.

This was just a quick summary of this topic. Later in this book, I devoted a full chapter to help you oversee clients and stakeholders with real-world examples.

1.2.4 Setting Development Standards
An especially important part of your job as a Lead Developer will be setting and maintaining development standards. You want to ensure that the development team is using the same coding style. This will bring symmetry to your codebase and the goal is to not be able to tell who the developer is just by looking at the code. One of the main reasons that organizations have standards is so that any developer can easily find the code they are looking for to fix a bug or improve a feature. This helps improve productivity as developers do not always have to reverse engineer code to find what they need.

Development standards should be as granular as possible including items such as where to place the curly brace after an if statement, adding comments before every function, and especially naming conventions. It is helpful to have a clear pattern in your file and directory names, modules, functions, and features.

Whether you are working on products or services, you must ensure that the development team adheres to the development standards. These standards must be well-documented and reviewed with every team member when they are being onboarded to the project. During the onboarding process, the Lead Developer should review the development standards with everyone on the team to ensure full adoption. During code review, standards should be enforced. You can also find common errors during code reviews that you can discuss with the entire team to ensure that everyone understands the development standards.

When you set development standards for a project, you may or may not have standards at the organizational level to rely on. If development standards exist, your priority is to learn and maintain them. Organizations may have custom libraries that should be included in all projects or a specific approach they take to technical architecture. These standards should change over time as the tech stacks your organization uses are upgraded or when new technologies come out that you want to adopt. Lead Developers can also influence the development standards at the organizational level, and you should never shy away from presenting new ideas for improvements.

Maintaining development standards is essential as technology is changing all the time. Lead Developers need to keep their skills current and alert the project team and potentially the organization about updates that need to be made. Subscribing to newsletters for the technologies that you’re using is a great way to keep up with the latest news and updates. Being active in the tech community and networking with people on social media is another way to keep up to date. Almost every technology has a community on Slack or Discord that is run either by a company or by community members.

I work with many different technologies, including Docker, which has an excellent community Slack and newsletters. Their Slack provides you with access to Docker Captains, Docker Community Leaders, and Docker employees who are always available to answer your questions. I am also in similar groups for .NET and Sitecore, where we share current standards and updates. This helps me stay up to date with frequently changing standards and practices.

You can also rely on your development team to suggest improvements to the development standards. Every developer should have a say in the development approach. When people from different backgrounds come together to share ideas, this drives innovation. Including them in the standards process is a great way to motivate the team to keep their skills current by engaging in continuous learning.

1.2.5 Building Technical Architecture
Lead Developers are expected to understand how to build technical architecture from scratch using current industry standards and practices. You will need to work with project teams to ensure that the approach you are implementing fits within the budget but also provides a stable system. I have often worked with teams where I was the main decision maker but I leaned on other Lead Developers to ensure that I was making the right decisions if I was struggling. It is important to ask for help when you need it.

Being able to build out and document the technical architecture of a project from scratch is not a skill that is easy to come by. You may be able to build a simple application using a tutorial but when it comes to consumer products and enterprise solutions, you will need to understand much more advanced concepts. This takes time and experience and when we start as Junior Developers, our main task is to fix bugs or add features to already existing projects. The best way to learn how to build systems from scratch is to shadow and observe what the Lead Developer is doing. Ask them questions, get copies of the documentation they’re using, and work on prototypes or personal projects. Working on personal projects is a great way to learn new skills and it should be fun. You can get ideas for projects and guidance from boot camps, online courses, and architecture pattern books. Case studies are also a good resource, and you can find them by searching for the specific technology you are using. You can build yourself a portfolio website, app, or software that is related to your industry. If you become part of a community of developers, you should share your code with them for support.

In my experience, I have learned a lot from other developers within the organization. I would ask them for advice about the project I was working on even if they were not working on that project. It is a good practice to get an outside opinion from someone who is impartial because they can often see things that you cannot. I was often asked to help on projects that I did not work on, and we would discuss what worked well with our projects and what did not. This helped me learn more about the organizational approach to their products and keep my skills up to date.

One of your tasks as a Lead Developer may be to help plan out the budget for the technical architecture. This includes items such as server costs, software, web hosting, databases, and security protocols. The Lead Developer must get as granular as possible with these costs upfront to avoid a price hike during the project. Furthermore, whenever you upgrade a project, you should reassess these costs and try to find solutions that will minimize the expense for your organization. To estimate server costs, you can use tools such as the AWS or Azure cost calculators. Most cloud providers have tools to help you with estimates, including software and hosting as well. The budget for the technical architecture must include everything needed for every instance, including development, testing, staging, and production.

The Lead Developer is also responsible for creating an illustration of the technical architecture, usually in the form of a flowchart or diagram. Doing this will help you envision everything that you need to estimate for the budget. The illustration also shows how systems interact with each other as well as the users. The overall purpose of a technical diagram is to plan how to build your project from the ground up, including every stage of the software development lifecycle.

Figure 1.6 Example Technical Architecture Diagram

When you’re creating technical architecture diagrams for projects, you should try to be as consistent as possible. Check to see if your organization already has standards for creating technical architecture diagrams that you can follow. Make sure that the usage of shapes, lines, colors, and legends follow the same pattern to avoid miscommunication. These diagrams are crucial to the project’s success as it provides a clear map to show the team how everything will be built from start to finish and support the budget. Throughout this book, we will discuss creating and presenting technical architecture diagrams to clients and stakeholders.

livebook features:
settings
  
Update your profile, view your dashboard, tweak the text size, or turn on dark mode.
1.3 Lead Developer Expectations
Now that we have discussed Lead Developer tasks, we need to discuss the expectations for that role. It is important to understand the difference between responsibilities and expectations. Responsibilities are the tasks and duties that you're accountable for in your role, while expectations are the standards that others have of you. It's essential to take ownership of your responsibilities and ensure that you fulfill them to the best of your abilities. At the same time, you should also be aware of the expectations others have of you, such as being a good communicator, mentor, and leader. Balancing your responsibilities and expectations can be challenging, but it's crucial for your success and your team's success. Remember to always approach your role with a positive attitude and a willingness to learn and grow.

The Lead Developer role comes with many responsibilities, and you will be held to a higher standard than Junior or Senior Developers. A successful Lead Developer must be highly communicative and show true leadership skills. This is a completely different skill set than development work, and you will need to find a balance between your technical skills and leadership skills. When you’re working with project teams, they expect to be able to rely on you heavily to support everyone on the team, not just the development team. When you’re working with the development team, you are expected to deliver requirements from the project team to the developers who are implementing the features or fixing bugs.

The following list contains the main leadership expectations of a Lead Developer:

Providing Team Support
Forming Working Relationships
Being a Leader
When you’re working with non-developers such as Marketing, QA, Product Designers, and Executives, they will expect you to speak their language. If you use too many technical terms, they may get frustrated if they don’t understand. Cultivating a language style that is technical but doesn’t go too far into the weeds of specific development tasks will take time and a lot of observations of how the non-developers on the team speak to one another. Remember, they do have technical skills and you can always coach them a bit to support them and help them learn more about the technologies you are using in a project.

1.3.1 Providing Team Support
One of your main expectations as a Lead Developer is to provide support to your team. This entails being communicative and answering questions as quickly as possible. This is a hard task as you are the technical expert and as such, you will most likely be inundated with questions from the team. You also have your work to do so you can’t stop everything you’re doing every time someone pings you with a question. You must ensure that your needs and your team's needs are met.

The hardest part about being communicative is when you’re concentrating on doing your development work. If you stop when you’re in the middle of something, you will lose productivity because it is hard to get started again, especially if you’re working on a very complex feature or task. My rule for myself and the Lead Developers I have hired is to try to answer questions within one hour. This will give you some time to wrap up what you’re doing or at least get to a good stopping point so that you don’t lose productivity. We live in a world where people are very busy and tend to want immediate answers. You must set some boundaries so that you can accomplish your tasks, but a compromise must be made to ensure the success of the team and you need to find your balance.

A good way to reduce the number of questions you get daily is to anticipate the team's needs. When you are asked questions in a meeting, for example, you should explain the answer to its full and logical conclusion and don’t leave anything out. Often, people will ask a question in a meeting and then ask for further clarification after they have had time to think about it. Put yourself in their shoes and anticipate the information they need to complete their tasks. If someone asks the same question repeatedly, don’t get frustrated. They ask the same question because they may not understand the answer or there is no documentation. Taking the time to answer their questions and asking them to reiterate their understanding will help to mitigate this issue while increasing productivity.

Documenting FAQs in a central document repository and sharing it with the entire team is also a great way to ensure that everyone knows where to look for the information they need which will also help you balance your work. You should maintain separate FAQs for non-developers and developers on the project team. For developer FAQs, adding documentation directly to the code repository is a popular approach. The entire team should have access to add FAQs on their own and the Lead Developer should work with them to ensure that the answers are correct and there are no duplicates.

It also helps to create a glossary of terms to help non-developers understand the language that is being used. The terms should include everything that is included in the architecture diagram, and it should be linked to the diagram. This is a great reference for everyone on the team, including developers. The glossary should also include terms such as acronyms written in full including an explanation of what it is and what it does. Some acronyms are organization-specific so if anyone Googles that term, they may find other results with the same or similar acronym which will confuse them even more.

When you’re writing project documentation including a glossary, you should format it for readability and maximum retention. Most people organize a glossary in alphabetical order, but you can also group terms by industry vs. organizational terminology. I like to include a background knowledge section for industry-standard terms that already have their documentation. The background knowledge section should have links to existing documentation for industry terms and concepts to support different roles and varying degrees of expertise on the team.

When you go the extra mile to anticipate the needs of your team and provide them with the support, they need to be successful, you are also supporting your success as you can be more productive. Writing documentation and glossaries for an entire team is not an easy task as there are many different roles and experience levels within the team. A successful Lead Developer needs to understand how the people on the team think, what information they need to know, and how to help them learn.

1.3.2 Forming Working Relationships
Lead Developers must form working relationships so that there is cohesion, and the team works well together. This entails respecting the expertise of your team members, appreciating them, and having open communication. Developing trust and comradery amongst your team members can lead to a more productive and enjoyable work environment. When you take the time to get to know your colleagues, you can understand their strengths and weaknesses, communication styles, and work preferences. This can help you to delegate tasks better and foster a sense of collaboration, which can ultimately lead to more successful outcomes. When you have good working relationships, you will be better able to support the needs of your team.

Respecting the expertise of your co-workers seems like a no-brainer but you must be self-aware to be sure that you are being respectful. You should respect everyone you work with including developers, Project Managers, clients, etc. We are all prone to unconscious bias as it is built into our culture, and you must raise your level of self-awareness to ensure that you are being respectful. Unconscious bias is a social stereotype someone automatically forms about a person or group of people. It’s often unintentional and outside of their conscious awareness, so it can take time for people to realize that they’re creating unconscious biases toward others. You and your team need to know how to properly identify unconscious bias and immediately stop it.

The following list contains the most common examples of unconscious bias:

Ageism – The idea older people slow down and therefore are not as competent or capable at work
Beauty Bias – Unfairly judging people based on their appearance
Conformity Bias - This is basic peer pressure, and it happens when a person is pressured to agree with the opinion of the entire group, even if they have stated that they disagree
Affinity Bias – Being drawn to people who are like you
Confirmation Bias - Actively seeking to confirm ideas or success they had in the past that has little to no bearing on the current situation
Attribution Bias. Making assumptions about others based on their actions to understand why they’re acting that way
Gender Bias – Favoring one gender over another
Ableism – Prejudice against individuals with disabilities or those who are perceived as having disabilities
Cultural Bias – The tendency to judge or evaluate people, events, or behaviors based on the standards and values of one's own culture or group, without considering the cultural norms and values of other groups
Racism - A system of prejudice, discrimination, and power based on the belief that certain races are superior or inferior to others
Being self-aware is your first step in combatting unconscious bias and being more respectful to your co-workers. Lead Developers should ensure that they have a diverse team so that there is an even amount of representation. You need the expertise of people from different backgrounds to create products and services that are usable by your target audience. A Lead Developer needs to be open to learning from anyone. You can learn a lot from both non-developers and developers and rely on their expertise when you keep an open mind.

Good working relationships are formed by appreciating your co-workers. Tell the project team during a meeting how successful someone was in building a feature or fixing a bug. Say “thank you” when someone answers your questions or helps you find the answers that you need. Take your team out to lunch occasionally. Or, if you’re remote, schedule a fun activity that you can do together online such as a virtual happy hour, playing video games, or playing Dungeons and Dragons. I have participated in a virtual happy hour where everyone could order drinks of their choice and the company paid for them. The only problem was waiting until the happy hour to have their drink!

Open and consistent communication is a key component of every good working relationship. This can lead to having difficult conversations; however, moving through those conversations becomes easier when you already have a relationship with that person or group of people. When you’re working with internal co-workers, don’t lie and don’t sugarcoat things. When there’s a problem, let the team know and be honest and direct. It is so much worse when you try to cover things to protect yourself or your team. If you are not honest or consistent with your messaging, your team will lose trust in you. They may also follow your lead and avoid conflict or be dishonest themselves, which will only lead to more conflict. When you are consistent in your honesty, then people will come to expect it, and they will respect you for it.

1.3.3 Being a Leader
A leader is a person who is in a position of authority or influence and who is able to guide and direct others. Leaders may be responsible for making decisions, setting goals, and developing strategies for achieving those goals. They may also be responsible for inspiring and motivating others, and for building and maintaining relationships within a team or organization. Leadership styles and approaches can vary widely and may depend on the specific goals and needs of an organization, as well as the personalities and abilities of individual leaders.

Finding your leadership style is important and throughout this book, we will review current best practices. As a Lead Developer, you can’t “set it and forget it”, in other words, you need to check back in on things from time to time. You will be expected to make decisions, ensure accountability, and lead change. You want to inspire your team and lead by example while at the same time understanding that you cannot please everyone.

Making decisions takes a high level of critical thinking. A Lead Developer must consider risk, form a plan, and execute that plan. You need to keep a level head during this process to avoid making baseless decisions or going off course. Part of decision-making is ensuring that the action plan is carried out as you described. Therefore, you should check in throughout the project because people may deviate from the plan. When you have an action plan, you cannot set it and forget it. You must work together with your team to gather consistent feedback to ensure that everything is going as planned. When things are not going as planned, sharing information among the team can help you get back on track. Communicating the action plan should not include just telling your team what the plan is, but rather sharing information so that you can make informed decisions.

As a Lead Developer, everyone on your team looks to you, and you must lead by example. Establishing accountability for yourself is one of the first steps in becoming a true leader. You need to hold yourself accountable for deadlines and follow-through. If you promise to do something, then do it. If, for some reason, you cannot, then let the person know when they can expect what you promised. You should also apologize when you drop the ball on a project or offend someone unintentionally. Some people avoid apologizing because they don’t want to admit that they’re wrong and sometimes fear losing their job over it. This should never be the case and you need to show your team that apologizing when you’re wrong is a part of the team’s culture.

Leading by example is an important concept for all leaders to master. When you show your values through your behavior, then others will notice and follow your lead. At my first job as a Lead Developer, I was constantly promising that tasks would be done by a certain deadline and then I was so overloaded with work that I could not live up to that promise. Of course, you want to be enthusiastic about your work, but you must ensure that you are able to do the work in the amount of time given. I eventually learned how to push back on things that were not a priority so that my schedule was more realistic. In doing that, I found that my team felt comfortable coming to me when they felt overloaded so that we could work out a plan together.

We live in a world of change and people often do not like change because it can cause them anxiety. Anxiety is one of the most common mental health disorders and it impacts almost everyone at some level. Being a positive leader of change for your project team and organization will ensure your success as a Lead Developer and provide a safe and trusting workplace to mitigate anxiety among your team. Whether the change is suggested by you or another person on your team, you are expected to carry it out. You need to set an example by following the purpose and vision of the project while proposing necessary changes. Another component of this is to empower your team to be change leaders as well. They should feel comfortable sharing ideas, proposing new features, and streamlining processes. This will help raise their confidence level and give them the support that they need to develop their careers.

Inspiring the best in your team will help you draw out their talent. People are at their most productive when they feel supported, and you take an interest in their careers. However, being inspirational doesn’t mean that you will always agree with everyone. You do not have to be a people pleaser to be inspirational. Being a people pleaser is dangerous and it can cause unintentional conflict if you tell one person one thing, and another person another thing. They may feel lied to or even betrayed and then you need to sort that out. It is better to handle difficult conversations upfront and tell everyone why a decision must be made. If someone is unhappy, you should take them aside and listen to their concerns. Even if they are not happy with the decision, when you listen to co-workers, they will feel respected and appreciated which will inspire them to treat others the same way.

Being a leader applies to other roles in development besides Lead Developer. Everyone at every level of their career should learn leadership skills to help prepare them for the next phase of their career. In the next chapter, we will talk about your career trajectory from Junior to Lead Developer and beyond.

livebook features:
highlight, annotate, and bookmark
  
Select a piece of text and click the appropriate icon to annotate, bookmark, or highlight (you can also use keyboard shortcuts - h to highlight, b to bookmark, n to create a note).

You can automatically highlight by performing the text selection while keeping the alt/ key pressed.
1.4 Case Study
I have been a developer since 1998 and my career has spanned many different industries and job titles. I am currently the Co-owner at HoffsTech, LLC where I write and produce technical content including online courses with my husband, Jason Benhoff. I am also a Senior Developer Experience Manager at Docker. My technical skills include web development using .NET/C#/MVC, Sitecore CMS, Azure DevOps, Docker, and Kubernetes. I am a 4x Sitecore MVP and Docker Community Leader. I speak at conferences worldwide, and I am very passionate about mentoring future technology leaders. In the following case study, I will discuss my career leading up to and including being a Lead Developer to help you gain insight into the role and what it means to be a Lead Developer.

1.4.1 What Was Your First Experience as a Lead Developer?
I first became a Lead Developer after leaving a job where I was a manager, so my career trajectory was a bit different. Before I was a manager, I was a web developer and trainer. My responsibilities included creating courseware for developers to learn a specific platform. I had very complementary technical skills and I was highly organized, so I got promoted to management.

However, I had no management experience. I also had no project management experience, and I did not realize I would manage both the team and the projects. I tried to ask management for training in these skills, but I never received it. So, I leveraged the knowledge of people on my team and other managers within the organization. I cannot say I was successful in that job (I was not really set up for success), but I did learn a lot.

When I left that company, I wanted to get back to my developer roots and I was offered a Lead Developer role at an agency specializing in web development. This was the classic Lead Developer role where I had a project team, and I represented the development team to project stakeholders. Even with my management experience, I felt a bit like a fish out of water because, unlike my previous job, I was now speaking with external clients. This came with an extra level of stress for me because I wanted to ensure that the clients were happy with our team’s work.

At first, I struggled in all aspects of being a Lead Developer. I have somewhat of an introverted personality (at least until I get to know people) so my main struggle was speaking up and asserting my opinion. I also tried to please everyone, which is a topic we will get into in a later chapter. My technical abilities were fine, but I struggled in meetings, and I avoided conflict at all costs which I learned only leads to more conflict.

Over the years, I found my way by engaging with multiple mentors and reading leadership publications such as the Harvard Business Review. I also learned to lean on my team for advice and not be afraid to tell someone that I do not know the answer to their question. I failed a lot, but I always learned valuable lessons from failures which helped me in the long run.

1.4.2 What Did You Enjoy the Most as a Lead Developer?
My greatest joy as a Lead Developer is watching my mentees succeed. Being a support system for the team comes with a high level of responsibility and when one person is successful, we are all successful. One of my greatest success stories was when I worked with a very talented developer who did not want to come out of his comfort zone. But he also wanted to be a Lead Developer, so I coached him in the areas he was struggling with including being confident in his technical approach and presenting his approach to the project team. He was not comfortable with presentations at first and I told him that I get nervous every single time I present. Sometimes, it is so bad that I have a hand towel on my desk because my hands get sweaty. He found that very relatable and told me that he was inspired by my willingness to go outside of my comfort zone. I told him that his career will take a major turn when he is able to go outside of his comfort zone. He is an engineering manager now at a big company and I am so proud of him!

1.4.3 How Did Your Experience as a Lead Developer Set You Up for Success in Your Current Job?
I am currently the Co-Owner at HoffsTech, LLC and we produce technical content. I also create content as part of my job as a Senior Developer Experience Manager at Docker. This is very different from being a Lead Developer because I am working with technical writers, editors, and producers instead of developers and clients. My experience as a Lead Developer has set me up for success in my current roles as I oversee hiring and overall team management at HoffsTech. At Docker, I work with teams to create content to fit our audience and support our business goals. I support the developer community and I mentor everyone who works with me whether they are an employee of the company or a freelancer. I add mentoring opportunities to any job description that I post because I want potential candidates to know that they will be supported, which often attracts top talent. I understand how to manage the day-to-day tasks of my team and ensure that our processes are reviewed and updated constantly.

Being a Lead Developer taught me not only how to lead but also what true leadership means. I learned how to stay on my toes and figure out how to handle constant changes while remaining (relatively) calm. I understand how to resolve conflict in my team without blaming anyone. The main thing that I learned that has helped me the most was the realization that people work with me, not for me. That change in my mindset helped me be a better mentor and leader because my job is not to tell people what to do. My job is to draw out their talent by working together to figure out what to do.

1.5 Summary
Lead Developers are responsible for leading and mentoring development teams as well as communicating with project teams.
Lead Developers can come from any background including any gender, race, and education level.
The day-to-day tasks of a Lead Developer include leading the development team, working with project teams, communicating with clients and stakeholders, setting development standards, and building technical architecture.
The expectations of a Lead Developer are to provide team support, form working relationships, and be a leader.
Lead Developers must possess technical expertise and be capable of writing technical specifications, developing features, troubleshooting errors, and deploying code.
Lead Developers must learn leadership skills including facilitating communication, decision-making, gathering feedback, emotional intelligence, and self-awareness.
The career path for a Lead Developer normally begins with Junior Developer, then Senior Developer, and Developer Advocate/Developer Relations.
The success of a Lead Developer is reflected in the success of the development team and can be measured in the amount and quality of work completed in an iteration or release.